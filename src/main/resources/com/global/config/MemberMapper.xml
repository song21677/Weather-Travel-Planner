<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.olaenmanijo.weatherbasedtravelplanner.domain.member.mapper.MemberMapper">

    <!-- tb_member 테이블 전체 컬럼 -->
    <resultMap id="memberResponseMap" type="com.olaenmanijo.weatherbasedtravelplanner.domain.member.dto.response.MemberResponse">
        <id property="memberNo" column="MEMBER_NO" />
        <result property="memberId" column="MEMBER_ID" />
        <result property="password" column="PASSWORD" />
        <result property="nickname" column="NICKNAME" />
        <result property="gender" column="GENDER" />
        <result property="age" column="AGE" />
        <result property="email" column="EMAIL" />
        <result property="registerDate" column="REGISTER_DATE" />
        <result property="updateDate" column="UPDATE_DATE" />
        <result property="deleteYN" column="DELETE_YN" />
    </resultMap>
    
    <!-- 회원 정보 저장 (회원가입) -->
    <insert id="save" parameterType="com.olaenmanijo.weatherbasedtravelplanner.domain.member.dto.request.MemberRequest">
        insert into MEMBER_TB (
        MEMBER_NO
        , MEMBER_ID
        , PASSWORD
        , NICKNAME
        , GENDER
        , AGE
        , EMAIL
        ) values (
        MEMBER_SQ.NEXTVAL
        , #{memberId}
        , #{password}
        , #{nickname}
        , #{gender}
        , #{age}
        , #{email}
        )
    </insert>


    <!-- 회원 상세정보 조회 -->
    <select id="findByLoginId" parameterType="String" resultMap="memberResponseMap">
        SELECT
            MEMBER_NO
            , MEMBER_ID
            , PASSWORD
            , NICKNAME
            , GENDER
            , AGE
            , EMAIL
            , REGISTER_DATE
            , UPDATE_DATE
            , DELETE_YN
        FROM
            MEMBER_TB
        WHERE
            DELETE_YN = 0
            AND MEMBER_ID = #{memberId}
    </select>
    <!-- 회원 이름 조회 -->
    <select id="findByMemberNo" parameterType="long" resultMap="memberResponseMap">
        SELECT
            MEMBER_NO
            , MEMBER_ID
            , PASSWORD
            , NICKNAME
            , GENDER
            , AGE
            , EMAIL
            , REGISTER_DATE
            , UPDATE_DATE
            , DELETE_YN
        FROM
            MEMBER_TB
        WHERE
            DELETE_YN = 0
            AND MEMBER_NO = #{memberNo}
    </select>


    <!-- 회원 정보 수정 -->
    <update id="update" parameterType="com.olaenmanijo.weatherbasedtravelplanner.domain.member.dto.request.MemberRequest">
        UPDATE MEMBER_TB
        SET
            NICKNAME = #{nickname}
            , GENDER = #{gender}
            , AGE = #{age}
        <if test="password != null and password != ''">
            , PASSWORD = #{password}
        </if>
        WHERE
            MEMBER_NO = #{memberNo}
    </update>


    <!-- 회원 정보 삭제 (회원 탈퇴) -->
    <delete id="deleteById" parameterType="long">
        UPDATE MEMBER_TB
        SET
            DELETE_YN = 1
        WHERE
            MEMBER_NO = #{memberNo}
    </delete>
    
    
    <!-- 회원 수 카운팅 (ID 중복 체크) -->
    <select id="countByLoginId" parameterType="string" resultType="long">
        SELECT
            COUNT(*)
        FROM
            MEMBER_TB
        WHERE
            MEMBER_ID = #{memberId}
    </select>

</mapper>
